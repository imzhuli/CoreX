cmake_minimum_required(VERSION 3.15)
project (corex)

enable_language(CXX)

message(STATUS "CMAKE_BUILD_TYPE=" ${CMAKE_BUILD_TYPE})
message(STATUS "CMAKE_SYSTEM_NAME=" ${CMAKE_SYSTEM_NAME})
message(STATUS "CMAKE_CXX_COMPILER_ID=" ${CMAKE_CXX_COMPILER_ID})

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

find_package(Threads REQUIRED)
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	add_compile_options("-D_CRT_SECURE_NO_WARNINGS")
	add_compile_options("-std:c++20")
	add_compile_options("-wd4819")
	add_compile_options("-std:c++20")
	set(LINK_OPTIONS_NO_CONSOLE "/SUBSYSTEM:WINDOWS" "/ENTRY:mainCRTStartup")
	set(RELEASE_LINK_OPTIONS_NO_CONSOLE "$<$<CONFIG:Release>:${LINK_OPTIONS_NO_CONSOLE}>")
	set(cpp Threads::Threads)
else()
	set(CMAKE_CXX_STANDARD 20)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
	set(CMAKE_CXX_EXTENSIONS OFF)

	if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		add_compile_options("-g")
		add_compile_options("-Wall")
		add_compile_options("-Wno-attributes")
		add_compile_options("-Wno-parentheses")
		add_compile_options("-Wno-deprecated-declarations")
		add_compile_options("-Werror")
		set(cpp stdc++fs stdc++ Threads::Threads)
	elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
		add_compile_options("-g")
		add_compile_options("-Wall")
		add_compile_options("-Wno-attributes")
		add_compile_options("-Wno-parentheses")
		add_compile_options("-Wno-deprecated-declarations")
		add_compile_options("-Werror")
		set(cpp c++fs c++ Threads::Threads)
	elseif (CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
		add_compile_options("-g")
		add_compile_options("-Wall")
		add_compile_options("-Wno-attributes")
		add_compile_options("-Wno-parentheses")
		add_compile_options("-Wno-deprecated-declarations")
		add_compile_options("-Werror")
		set(cpp Threads::Threads)
	endif()
endif()

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
	if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
		set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/.local" CACHE PATH "..." FORCE)
	else()
		set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/.local" CACHE PATH "..." FORCE)
	endif()
endif()

set(LIBRARY_OUTPUT_PATH                        "${PROJECT_BINARY_DIR}/bin")
set(EXECUTABLE_OUTPUT_PATH                     "${PROJECT_BINARY_DIR}/bin")
set(CMAKE_MODULE_PATH                          ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/Modules/")

set(CMAKE_BUILD_RPATH_USE_ORIGIN               TRUE)
set(CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH     TRUE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH          FALSE)
set(CMAKE_INSTALL_RPATH                        "\$ORIGIN")

set(THIRD_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/./_3rd_installed/include")
set(THIRD_LIB_DIRS     "${PROJECT_SOURCE_DIR}/./_3rd_installed/lib")

option(BUILD_SHARED_LIBS "Build using shared libraries" ON)
option(SERVER_SIDE_LIB_ONLY "Build server side lib only, no rendering involved" OFF)
add_subdirectory(src)
add_subdirectory(src_test)
add_subdirectory(src_app)
